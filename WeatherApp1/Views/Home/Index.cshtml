@model IEnumerable<WeatherApp1.Models.WeatherForecast>
@using Microsoft.AspNetCore.Identity
@using WeatherApp1.Data
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Прогноза за времето";

    int forecastDaysToShow = 3;
    if (User.Identity.IsAuthenticated && !User.IsInRole("Admin"))
    {
        forecastDaysToShow = 7;
    }

    var forecastsToShow = User.IsInRole("Admin") ? Model : Model.Take(forecastDaysToShow);

    string GetWeatherClass(string description)
    {
        return description switch
        {
            "предимно слънчево" => "sunny",
            "слънчево" => "sunny",
            "предимно облачно" => "cloudy",
            "облачно" => "cloudy",
            "предимно слънчево кратък дъжд" => "sunnyRainy",
            "предимно слънчево кратък сняг" => "sunnySnowy",
            "предимно облачно сняг" => "cloudySnowy",
            "предимно облачно кратък сняг" => "cloudySnowy",
            "предимно облачно дъжд" => "cloudyRainy",
            "предимно облачно кратък дъжд" => "cloudyRainy",
            "облачно сняг" => "cloudySnowy",
            "облачно дъжд" => "cloudyRainy",
            "облачно кратък дъжд" => "cloudyRainy",
            "облачно кратък сняг" => "cloudySnowy",
            _ => "bg-gray-200 text-black"
        };
    }

    string GetWeatherEmoji(string description)
    {
        return description switch
        {
            "предимно слънчево" => "☀️",
            "слънчево" => "☀️",
            "облачно" => "☁️",
            "предимно облачно" => "🌥️",
            "облачно дъжд" => "☁️🌧️",
            "облачно сняг" => "☁️❄️",
            "предимно облачно сняг" => "🌥️❄️",
            "предимно облачно дъжд" => "🌥️🌧️",
            "предимно облачно кратък сняг" => "☁️❄️",
            "предимно облачно кратък дъжд" => "☁️🌧️",
            "облачно кратък дъжд" => "☁️🌧️",
            "облачно кратък сняг" => "☁️❄️",
            _ => "🌈"
        };
    }

    string GetMoonPhaseImage(string moonPhase)
    {
        return moonPhase.ToLower() switch
        {
            "новолуние" => "🌑",
            "изгряващ полумесец" => "🌒",
            "първа четвърт" => "🌓",
            "растяща луна" => "🌔",
            "пълнолуние" => "🌕",
            "намаляваща луна" => "🌖",
            "трета четвърт" => "🌗",
            "залязващ полумесец" => "🌘",
            _ => "🌕"
        };
    }
}

<h1 class="text-center mb-4">Прогноза за времето</h1>

@if (User.IsInRole("Admin"))
{
    <p>
        <a asp-controller="WeatherForecasts" asp-action="Create" class="btn btn-primary">Създай нова прогноза</a>
    </p>
}

@if (User.Identity.IsAuthenticated && forecastsToShow.Any())
{
    <p>
        <button id="prevBtn" class="nav-btn left-btn" onclick="prevSlide()">&#10094;</button>
    </p>
}

<div class="weather-container">
    <div class="weather-slider">
        @foreach (var item in forecastsToShow)
        {
            <div class="weather-card-container">
                <div class="card weather-card @GetWeatherClass(item.WeatherDescription)">
                    <div class="card-body">
                        @if (User.IsInRole("Admin"))
                        {
                            <div class="settings-icon" onclick="toggleSettingsMenu(this)">
                                ⚙️
                                <div class="settings-menu">
                                    <a class="btn btn-warning btn-sm" asp-controller="WeatherForecasts" asp-action="Edit" asp-route-id="@item.Id">Редактирай</a>
                                    <a class="btn btn-info btn-sm" asp-controller="WeatherForecasts" asp-action="Details" asp-route-id="@item.Id">Детайли</a>
                                    <a class="btn btn-danger btn-sm" asp-controller="WeatherForecasts" asp-action="Delete" asp-route-id="@item.Id">Изтрий</a>
                                </div>
                            </div>
                        }

                        <h5 class="card-title text-center"><strong>@Html.DisplayFor(modelItem => item.DayOfWeek)</strong></h5>

                        <div class="weather-emoji-container">
                            <span class="weather-emoji">@GetWeatherEmoji(item.WeatherDescription)</span>
                            <div class="weather-tooltip">@item.WeatherDescription</div>
                        </div>

                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">🌡️ <strong>Макс. температура:</strong> @(User.Identity.IsAuthenticated ? $"{item.MaxTemperature}°C" : "-")</li>
                            <li class="list-group-item">🌡️ <strong>Мин. температура:</strong> @(User.Identity.IsAuthenticated ? $"{item.MinTemperature}°C" : "-")</li>
                            <li class="list-group-item">💨 <strong>Скорост на вятъра:</strong> @(User.Identity.IsAuthenticated ? $"{item.WindSpeed} км/ч" : "-")</li>
                            <li class="list-group-item">🧭 <strong>Посока на вятъра:</strong> @(User.Identity.IsAuthenticated ? item.WindDirection : "-")</li>
                            <li class="list-group-item">🌧️ <strong>Вероятност за дъжд:</strong> @(User.Identity.IsAuthenticated ? $"{item.RainProbability}%" : "-")</li>
                            <li class="list-group-item">🌅 <strong>Изгрев:</strong> @(User.Identity.IsAuthenticated ? $"{item.Sunrise.Hours:D2}:{item.Sunrise.Minutes:D2}" : "-")</li>
                            <li class="list-group-item">🌇 <strong>Залез:</strong> @(User.Identity.IsAuthenticated ? $"{item.Sunset.Hours:D2}:{item.Sunset.Minutes:D2}" : "-")</li>

                            @{
                                TimeSpan dayDuration = item.Sunset - item.Sunrise;
                                string formattedDuration = $"{dayDuration.Hours} ч. {dayDuration.Minutes} мин.";
                            }

                            <li class="list-group-item">
                                ⏳ <strong>Продължителност на деня:</strong>
                                @(User.Identity.IsAuthenticated
                                    ? Html.Raw("<br />" + formattedDuration)
                                    : " -")
                            </li>

                            <li class="list-group-item">
                                🌙 <strong>Фаза на луната:</strong>
                                <div class="moon-phase-container">
                                    <span class="moon-phase-emoji">
                                        @(User.Identity.IsAuthenticated ? GetMoonPhaseImage(item.MoonPhase) : "")
                                    </span>
                                    @if (User.Identity.IsAuthenticated)
                                    {
                                        <div class="moon-tooltip">@item.MoonPhase</div>
                                    }
                                </div>
                            </li>


                        </ul>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@if (User.Identity.IsAuthenticated && forecastsToShow.Any())
{
    <p>
        <button id="nextBtn" class="nav-btn right-btn" onclick="nextSlide()">&#10095;</button>
    </p>
}

@section Scripts {
    <script>
        let index = 0;
        const cardWidth = document.querySelector('.weather-card-container').offsetWidth + 20;
        const slider = document.querySelector('.weather-slider');
        const totalCards = document.querySelectorAll('.weather-card-container').length;
        const visibleCards = 3;

        function nextSlide() {
            if (index < totalCards - visibleCards) {
                index++;
                updateSlider();
            }
        }

        function prevSlide() {
            if (index > 0) {
                index--;
                updateSlider();
            }
        }

        function updateSlider() {
            slider.style.transform = `translateX(-${index * cardWidth}px)`;
            updateNavButtons();
        }

        function updateNavButtons() {
            document.getElementById("prevBtn").style.display = (index > 0) ? "block" : "none";
            document.getElementById("nextBtn").style.display = (index < totalCards - visibleCards) ? "block" : "none";
        }

        document.addEventListener("DOMContentLoaded", updateNavButtons);

        function toggleSettingsMenu(element) {
            document.querySelectorAll(".settings-menu").forEach(menu => {
                if (menu !== element.querySelector(".settings-menu")) {
                    menu.classList.remove("active");
                }
            });

            let menu = element.querySelector(".settings-menu");
            menu.classList.toggle("active");
        }

        document.addEventListener("click", function (event) {
            let isClickInside = event.target.closest(".settings-icon");

            if (!isClickInside) {
                document.querySelectorAll(".settings-menu").forEach(menu => {
                    menu.classList.remove("active");
                });
            }
        });
    </script>
}
